[gd_scene load_steps=8 format=2]

[ext_resource path="res://assets/images/player.png" type="Texture" id=1]
[ext_resource path="res://scenes/explosions/Explosion.tscn" type="PackedScene" id=2]
[ext_resource path="res://assets/sounds/shot/rielgun.mp3" type="AudioStream" id=3]

[sub_resource type="GDScript" id=4]
script/source = "extends Area2D

signal on_collision_walls
signal on_restart

func get_class(): return \"Player\"

var Bullet = preload(\"res://scenes/bullets/Bullet.tscn\")

onready var animation := $Sprite/AnimationPlayer
onready var timerInvulnerable := $TimerInvulnerable
onready var playerAnimation := $AnimationPlayer
onready var collision := $CollisionShape2D
onready var explosion := $Explosion
onready var timerRestart := $TimerRestart

export(float) var speed = 200.0
export(bool) var invulnerable = false
export(int) var id = 0

var weapons = []
var _velocity = Vector2()
var lastShot = []

var tilemap = null

func _ready():
	self.animation.play(\"default\")

func _read_input():
	self._velocity = Vector2()
	
	match self.id:
		1:
			if Input.is_action_pressed(\"1up_left\"):
				self._velocity.x += -1
			if Input.is_action_pressed(\"1up_right\"):
				self._velocity.x += 1
			if Input.is_action_pressed(\"1up_up\"):
				self._velocity.y += -1
			if Input.is_action_pressed(\"1up_down\"):
				self._velocity.y += 1
			if Input.is_action_pressed(\"1up_fire\"):
				shot()
		2:
			if Input.is_action_pressed(\"2up_left\"):
				self._velocity.x += -1
			if Input.is_action_pressed(\"2up_right\"):
				self._velocity.x += 1
			if Input.is_action_pressed(\"2up_up\"):
				self._velocity.y += -1
			if Input.is_action_pressed(\"2up_down\"):
				self._velocity.y += 1
			if Input.is_action_pressed(\"2up_fire\"):
				shot()
	
	self._velocity = self._velocity.normalized() * self.speed

func _physics_process(delta):
	
	if self.timerRestart.is_stopped():
		_read_input()
		
		if self._velocity.x != 0 or self._velocity.y != 0:
			var lastPosition = self.position
			self.position += self._velocity * delta
			if self.position.x >= get_viewport().size.x or self.position.x < 0 or self.position.y < 0 or self.position.y >= get_viewport().size.y:
				self.position = lastPosition
		
		for collider in get_overlapping_bodies():
			if collider.collision_layer == 1:
				if not self.invulnerable:
					if collider.collision_layer == 1:
						emit_signal(\"on_collision_walls\", self, collider)

func set_invulnerable(seconds):
	self.timerInvulnerable.start(seconds)
	self.invulnerable = true
	self.playerAnimation.play(\"invulnerable\")

func _on_TimerInvulnerable_timeout():
	self.invulnerable = false
	self.playerAnimation.stop()
	visible = true

func add_weapon(weapon):
	var index = self.weapons.find(weapon)
	if index == -1:
		self.weapons.append(weapon)
		self.lastShot.append(0)

func shot():
	var justFired = false
	
	if self.weapons.empty():
		return
		
	for i in range(self.weapons.size()):
		var bullet = _create_bullet_by_weapon(self.weapons[i])
		if bullet:
			if bullet.can_fire(self.lastShot[i]):
				justFired = true
				get_parent().add_child(bullet)
				bullet.connect(\"on_collision\", get_parent(), \"_on_bullet_collision\")
				self.lastShot[i] = OS.get_ticks_msec()
	
	if justFired:
		$AudioShot.play()
	
func _create_bullet_by_weapon(weapon):
	var bulletType = Global.BulletType.BULLET_RIELGUN
	
	match weapon:
		Global.WeaponType.WEAPON_MISSILE:
			bulletType = Global.BulletType.BULLET_MISSILE
		Global.WeaponType.WEAPON_RIELGUN:
			bulletType = Global.BulletType.BULLET_RIELGUN
		_:
			return null
	
	var bullet = Bullet.instance()
	bullet.create(self, bulletType)
	
	return bullet

func destroy():
	self.timerRestart.start(1.0)
	self.visible = false
	self.invulnerable = true

func _on_TimerRestart_timeout():
	self.visible = true
	emit_signal(\"on_restart\")
"

[sub_resource type="Animation" id=3]
resource_name = "default"
length = 0.4
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 1,
"values": [ 0, 1, 2, 1 ]
}

[sub_resource type="CapsuleShape2D" id=2]
radius = 4.0
height = 12.0

[sub_resource type="Animation" id=5]
resource_name = "invulnerable"
length = 0.2
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 1,
"values": [ true, false, true ]
}

[node name="Player" type="Area2D"]
collision_layer = 4
collision_mask = 11
script = SubResource( 4 )

[node name="Sprite" type="Sprite" parent="."]
texture = ExtResource( 1 )
vframes = 3

[node name="AnimationPlayer" type="AnimationPlayer" parent="Sprite"]
anims/default = SubResource( 3 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
rotation = 1.5708
shape = SubResource( 2 )

[node name="Camera" type="Camera2D" parent="."]
current = true
limit_left = 0
limit_top = 0
limit_right = 480
limit_bottom = 270
smoothing_enabled = true

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/invulnerable = SubResource( 5 )

[node name="TimerInvulnerable" type="Timer" parent="."]
one_shot = true

[node name="Explosion" parent="." instance=ExtResource( 2 )]
visible = false

[node name="AudioShot" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 3 )

[node name="TimerRestart" type="Timer" parent="."]
one_shot = true

[connection signal="timeout" from="TimerInvulnerable" to="." method="_on_TimerInvulnerable_timeout"]
[connection signal="timeout" from="TimerRestart" to="." method="_on_TimerRestart_timeout"]
